{
  "hash": "88d25b63408e4770c76431be5eb13937",
  "result": {
    "markdown": "---\ntitle: \"Understanding pvalues, multiple testing and qvalues\"\nauthor: \"Temi\"\ndescription: \"...\"\ndate: \"Wed Sep 6 2023\"\ncategories: [R, statistics]\n---\n\n\n:::{.callout-note}\nThis post is still under construction; I am adding sutff as I get the time to.\n:::\n\n:::{.callout-tip}\n1. [Storey and Tibshirani's paper](https://www.pnas.org/doi/10.1073/pnas.1530509100?url_ver=Z39.88-2003&rfr_id=ori%3Arid%3Acrossref.org&rfr_dat=cr_pub++0pubmed) is a good place to start\n2. Haky's notes [here](https://lab-notes.hakyimlab.org/post/2023-03-28-multiple-testing/) are also very helpful; and this notebook was partly inspired by her notes.\n:::\n\n# Introduction\nWhen you do multiple testing, you want to control the false positive rate (fpr) because by nature of p-values, if there is nothing interesting going on, you still have an `alpha` % chance of detecting something, which is a false positive.\n\n\n# Simulation 1: Null and alternative effects.\n\nI have a simple linear function here, where $X$ has some effect, $\\beta$ on $Y$.\n\n$$\nY \\approx \\sum X\\beta + \\epsilon\n$$\n\n\nwhere,\n\n\n\n$$\nX \\approx \\mathcal{N}(0.2,1)\\\n$$\n\n$$\n\\epsilon \\approx \\mathcal{N}(0,0.1)\n$$\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(qvalue)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::source_gist('https://gist.github.com/TemiPete/d7e37272964e5f00af4efea01d295dc8')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Sourcing gist \"d7e37272964e5f00af4efea01d295dc8\"\nℹ SHA-1 hash of file is \"d308c0c2f4eb3d58cff6b52ad22538f09bd136e0\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2023)\nnobserv <- 2000 # number of observations\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrue_mean <- 0.2\ntrue_sd <- 1\neps_mean <- 0\neps_sd <- 0.5\nbeta <- 0.6\nx <- rnorm(n=nobserv, mean=true_mean, sd=true_sd)\ne <- rnorm(n=nobserv, mean = eps_mean, sd=eps_sd)\n\nyalt <- x * beta + e\nplot(x, yalt, main='x has an effect on y', frame.plot=F)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nynull <- rnorm(n=nobserv, mean=0, sd=beta)\nplot(x, ynull, main='x has no effect on y', frame.plot=F)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.svg)\n:::\n:::\n\n\nNow I can simulate these tests multiple times, say, 10000\n\n\n::: {.cell}\n\n```{.r .cell-code}\nntests <- 10000\nX <- matrix(rnorm(n=nobserv*ntests, mean=true_mean, sd=true_sd), nrow=nobserv, ncol=ntests)\nepsilon <- matrix(rnorm(n=nobserv*ntests, mean=eps_mean, sd=eps_sd), nrow=nobserv, ncol=ntests)\ndim(X) ; dim(epsilon)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2000 10000\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2000 10000\n```\n:::\n\n```{.r .cell-code}\nYalt <- X * beta + epsilon\nYnull <- matrix(rnorm(n=nobserv, mean=0, sd=beta), nrow=nobserv, ncol=ntests)\ndim(Yalt) ; dim(Ynull)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2000 10000\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2000 10000\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npvec = rep(NA,ntests)\nbvec = rep(NA,ntests)\n\nfor(ss in 1:ntests)\n{\n  fit = fastlm(X[,ss], Ynull[,ss])\n  pvec[ss] = fit$pval  \n  bvec[ss] = fit$betahat\n}\n\nsummary(pvec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n0.0000291 0.2501638 0.4916683 0.4972860 0.7465493 0.9999487 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(pvec < 0.05) ; mean(pvec < 0.05)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 481\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.0481\n```\n:::\n:::\n\n\nEven under the null, we find that 5% of our tests are false positives! In real life, we would think these are true effects, which is not good.\n\nSo, we try to control this `false positive rate`. There are many methods, but we can use the Bonferroni approach\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncutoff <- 0.05/length(pvec)\nsum(pvec < cutoff) ; mean(pvec < cutoff)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n:::\n\n\nWith Bonferroni correction, we see that all of the tests are null, which is what should have happened in the first place.\nAnyway, all that was for simulation sake. I should create a set of tests, where some proportion are under the alternative i.e. true, and the rest are not i.e. null\n\n# Simulation 2: A mixture of outcomes under the null and alternative hypothesis.\n\n::: {.cell}\n\n```{.r .cell-code}\nptrue <- 0.2 # only 20% of the tests are TRUE\nwtrue <- sample(x=c(0,1), size=ntests, replace=TRUE, prob=c(1-0.2, 0.2))\ntable(wtrue) |> prop.table()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nwtrue\n     0      1 \n0.8046 0.1954 \n```\n:::\n:::\n\n\nI will look through `wtrue`. If `0`, I will select the ynull at that index, otherwise, I will select the yalt\n\n\n::: {.cell}\n\n```{.r .cell-code}\nYboth <- matrix(NA, nrow=nobserv, ncol=ntests)\nfor(i in seq_along(wtrue)){\n    if(wtrue[i] == 1){\n        Yboth[, i] <- Yalt[, i]\n    } else {\n        Yboth[, i] <- Ynull[, i]\n    }\n}\n\ndim(Yboth)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2000 10000\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## run linear regression for all 10000 phenotypes in the mix of true and false associations, Ymat_mix\npvec_mix = rep(NA,ntests)\nbvec_mix = rep(NA,ntests)\nfor(ss in 1:ntests){\n  fit = fastlm(X[,ss], Yboth[,ss])\n  pvec_mix[ss] = fit$pval  \n  bvec_mix[ss] = fit$betahat\n}\nsummary(pvec_mix)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.0678  0.3792  0.3992  0.6825  0.9999 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(pvec_mix < 0.05) ; mean(pvec_mix < 0.05)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2339\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.2339\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(pvec_mix, main='')\nmtext('A simulation under the null + alt', side=3, line=1, adj = 0)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.svg)\n:::\n:::\n\n\nWe expect 500 to be significant under the null, but we get 2339. \n\nSince we have more than what we expected under the null, we can assume that the remainder are gotten under the alternative. We can estimate this `true discovery rate` \n\n\n$$\n\\frac{(nobserved - nexpected)}{nobserved}\n$$\n\n::: {.cell}\n\n```{.r .cell-code}\ntdr <- ((sum(pvec_mix < 0.05)) - (0.05*ntests))/(sum(pvec_mix < 0.05))\ntdr \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.7862334\n```\n:::\n:::\n\n\nThe `false discovery rate` is 1 - `tdr`, which in this case is 0.2137666. \n\nAll well and good, except that our `tdr` here is higher than we expect. Instead we can estimate the positive false discovery rate or `pFDR`. Here's how I explain this:\n  : Given that you have found a number of tests to be significant, let's call this `tsig`, and we expect at least one of these to be positive i.e. under the alternative, what is the expected number of false positives? i.e. what proportion are not true but we come out as true. \n\nTo break this down a little, I will start from here:\nAssuming you do a test to classify if a a group of people eat fruits or not, and you have this table after.\n\n\n|                                 | eats fruits     | does not eat fruits |   |\n|---------------------------------|-----------------|---------------------|---|\n| classified: eat fruits          | true positives  | false positives     |   |\n| classified: does not eat fruits | false negatives | true negatives      |   |\n|                                 |                 |                     |   |\n\nThe fpr, as mentioned earlier is: \n\n$$\n\\frac{false\\ positives}{(false\\ positives\\ +\\ true\\ negatives)}\n$$\n\n\ni.e. of all the people who don't eat fruits, how many of them do we classify to eat fruits based on our tests?\n\nThe fdr then is, of all the people who we classify as eating fruits, how many of them don't actually eat fruits?\n\n$$\n\\frac{false\\ positives}{(true\\ positives\\ +\\ false\\ positives)}\n$$\n\n\nUsing the table + idea above, I can then \n\n\n|                                 |      | does not eat fruits |   |\n|---------------------------------|-----------------|---------------------|---|\n| classified: eat fruits          | true positives  | false positives     |   |\n| classified: does not eat fruits | false negatives | true negatives      |   |\n|                                 |                 |                     |   |\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwhich(pvec_mix < 0.05)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   [1]     8    17    18    23    26    27    28    32    33    34    39    44\n  [13]    47    49    59    62    64    68    69    76    78    83    91    95\n  [25]    96    99   109   111   112   119   120   122   123   125   126   128\n  [37]   129   139   144   149   155   156   168   169   173   179   182   190\n  [49]   201   203   206   212   215   220   224   227   241   243   248   253\n  [61]   258   263   269   271   272   275   277   281   285   286   293   294\n  [73]   298   304   305   310   311   318   323   330   333   334   336   341\n  [85]   342   349   355   356   360   362   366   367   370   374   376   382\n  [97]   383   386   387   390   396   398   405   407   409   411   417   432\n [109]   436   437   445   448   451   452   466   468   474   476   480   487\n [121]   493   498   501   505   507   509   512   513   516   518   526   530\n [133]   539   541   543   546   551   553   554   560   565   575   577   580\n [145]   583   585   594   595   596   598   622   628   633   636   639   641\n [157]   642   645   647   648   649   653   654   656   658   668   673   679\n [169]   687   690   695   699   702   706   712   713   714   722   723   725\n [181]   726   727   729   731   741   744   747   751   756   772   776   777\n [193]   778   787   789   796   799   802   811   813   818   820   825   837\n [205]   843   845   848   849   850   854   857   858   869   874   877   878\n [217]   888   897   905   909   911   916   919   924   932   935   939   948\n [229]   949   951   958   963   964   965   972   976   979   980   989   993\n [241]   998  1007  1008  1015  1021  1023  1026  1031  1034  1036  1039  1040\n [253]  1041  1042  1049  1050  1056  1061  1063  1068  1074  1076  1078  1086\n [265]  1088  1095  1097  1103  1105  1109  1110  1116  1117  1123  1125  1127\n [277]  1131  1132  1133  1134  1135  1136  1138  1143  1146  1148  1153  1159\n [289]  1161  1166  1169  1180  1181  1182  1185  1189  1192  1200  1204  1205\n [301]  1206  1210  1217  1220  1224  1230  1231  1238  1241  1243  1244  1246\n [313]  1247  1252  1254  1264  1265  1274  1275  1278  1279  1285  1290  1300\n [325]  1312  1317  1322  1327  1330  1331  1333  1341  1348  1353  1355  1357\n [337]  1360  1362  1364  1366  1367  1372  1373  1380  1393  1401  1403  1406\n [349]  1408  1418  1427  1431  1436  1445  1447  1458  1459  1462  1467  1468\n [361]  1471  1477  1491  1498  1499  1500  1506  1511  1512  1516  1520  1522\n [373]  1526  1527  1531  1537  1538  1541  1548  1557  1573  1581  1588  1590\n [385]  1600  1601  1604  1609  1610  1613  1618  1625  1626  1627  1630  1633\n [397]  1636  1641  1649  1653  1657  1658  1664  1665  1666  1670  1673  1684\n [409]  1685  1696  1698  1705  1708  1712  1713  1714  1716  1717  1723  1726\n [421]  1728  1730  1735  1736  1739  1744  1750  1751  1753  1761  1777  1788\n [433]  1792  1794  1802  1811  1812  1816  1821  1827  1832  1834  1841  1848\n [445]  1849  1851  1852  1867  1880  1881  1894  1896  1898  1902  1905  1913\n [457]  1919  1922  1934  1940  1945  1947  1948  1950  1952  1956  1960  1966\n [469]  1969  1971  1975  1982  1983  1986  1994  1998  2006  2008  2011  2013\n [481]  2015  2020  2022  2024  2028  2031  2041  2048  2052  2057  2063  2079\n [493]  2090  2093  2096  2097  2099  2106  2108  2113  2114  2117  2121  2123\n [505]  2126  2127  2129  2130  2132  2134  2135  2141  2142  2144  2152  2153\n [517]  2154  2155  2161  2165  2169  2170  2174  2175  2177  2179  2180  2181\n [529]  2182  2187  2188  2190  2191  2194  2200  2212  2214  2220  2225  2238\n [541]  2244  2246  2253  2255  2259  2263  2269  2274  2277  2278  2279  2284\n [553]  2287  2291  2296  2306  2313  2325  2326  2333  2335  2336  2339  2340\n [565]  2344  2347  2349  2354  2363  2369  2374  2375  2377  2381  2382  2383\n [577]  2384  2386  2387  2395  2396  2407  2413  2414  2415  2419  2420  2421\n [589]  2424  2425  2428  2432  2436  2438  2440  2443  2444  2453  2454  2455\n [601]  2458  2462  2464  2465  2468  2476  2480  2481  2482  2492  2498  2509\n [613]  2522  2524  2525  2527  2528  2529  2530  2534  2537  2538  2539  2548\n [625]  2553  2558  2572  2574  2578  2579  2581  2584  2587  2592  2593  2596\n [637]  2597  2606  2614  2616  2630  2631  2641  2642  2646  2655  2657  2662\n [649]  2664  2665  2666  2669  2676  2678  2679  2683  2686  2689  2694  2695\n [661]  2703  2705  2708  2721  2725  2727  2729  2734  2738  2739  2743  2745\n [673]  2755  2762  2775  2779  2790  2791  2793  2794  2796  2799  2800  2801\n [685]  2805  2811  2815  2821  2823  2830  2833  2840  2842  2846  2847  2848\n [697]  2849  2852  2863  2874  2875  2876  2880  2888  2897  2898  2901  2904\n [709]  2908  2915  2917  2937  2941  2950  2951  2952  2953  2955  2961  2964\n [721]  2981  2983  2987  2995  2998  3004  3010  3012  3014  3016  3024  3025\n [733]  3028  3038  3039  3043  3052  3054  3057  3058  3071  3077  3078  3080\n [745]  3082  3091  3095  3096  3100  3112  3116  3130  3131  3139  3144  3146\n [757]  3147  3149  3151  3167  3168  3173  3175  3196  3199  3200  3202  3203\n [769]  3205  3206  3209  3211  3218  3221  3224  3234  3235  3236  3237  3238\n [781]  3241  3242  3246  3250  3251  3256  3258  3261  3263  3277  3281  3283\n [793]  3297  3302  3317  3320  3326  3338  3339  3344  3347  3356  3362  3377\n [805]  3380  3381  3393  3396  3400  3411  3412  3416  3418  3426  3427  3430\n [817]  3433  3437  3444  3445  3446  3448  3449  3452  3463  3466  3469  3485\n [829]  3489  3499  3508  3512  3518  3521  3522  3524  3525  3535  3536  3539\n [841]  3542  3548  3555  3558  3561  3563  3564  3565  3573  3574  3591  3596\n [853]  3601  3603  3608  3609  3611  3619  3633  3635  3636  3637  3641  3644\n [865]  3648  3649  3651  3654  3658  3664  3668  3670  3672  3673  3674  3677\n [877]  3678  3685  3686  3690  3692  3694  3697  3698  3705  3706  3710  3717\n [889]  3725  3732  3740  3750  3754  3756  3759  3760  3771  3776  3778  3784\n [901]  3788  3792  3794  3795  3807  3816  3822  3833  3834  3840  3841  3842\n [913]  3843  3848  3863  3870  3872  3875  3879  3885  3888  3896  3906  3908\n [925]  3915  3916  3923  3925  3939  3941  3953  3956  3961  3969  3972  3976\n [937]  3980  3981  3982  3989  3994  4006  4010  4016  4025  4030  4031  4038\n [949]  4045  4047  4051  4052  4061  4062  4072  4080  4081  4084  4098  4104\n [961]  4105  4110  4115  4118  4119  4121  4122  4123  4125  4128  4131  4133\n [973]  4145  4148  4152  4155  4156  4160  4161  4162  4163  4172  4174  4175\n [985]  4177  4179  4180  4181  4182  4184  4189  4190  4192  4197  4204  4210\n [997]  4213  4214  4221  4240  4244  4246  4247  4248  4252  4253  4258  4264\n[1009]  4269  4272  4281  4283  4300  4308  4311  4312  4315  4317  4321  4322\n[1021]  4330  4333  4334  4341  4342  4343  4344  4350  4361  4364  4385  4387\n[1033]  4388  4393  4398  4401  4404  4406  4407  4417  4423  4429  4430  4436\n[1045]  4437  4439  4444  4449  4453  4461  4468  4470  4472  4473  4477  4480\n[1057]  4482  4484  4487  4488  4492  4497  4507  4516  4525  4526  4533  4539\n[1069]  4542  4552  4557  4561  4562  4563  4565  4569  4586  4589  4593  4594\n[1081]  4604  4617  4618  4622  4627  4629  4645  4649  4654  4658  4661  4665\n[1093]  4666  4673  4675  4680  4691  4692  4693  4696  4697  4700  4704  4708\n[1105]  4721  4727  4737  4741  4744  4746  4749  4753  4756  4757  4759  4765\n[1117]  4771  4779  4785  4796  4800  4802  4803  4805  4809  4813  4814  4819\n[1129]  4820  4824  4832  4837  4839  4841  4842  4846  4851  4858  4865  4872\n[1141]  4877  4878  4881  4882  4888  4889  4890  4891  4894  4898  4902  4906\n[1153]  4908  4910  4911  4914  4916  4919  4922  4923  4928  4933  4935  4943\n[1165]  4948  4950  4953  4955  4982  4985  4990  4995  4997  4999  5001  5009\n[1177]  5011  5012  5014  5017  5018  5019  5023  5024  5036  5040  5047  5052\n[1189]  5053  5055  5057  5061  5062  5071  5076  5077  5079  5080  5082  5085\n[1201]  5090  5093  5097  5102  5105  5120  5132  5140  5142  5150  5154  5165\n[1213]  5172  5176  5180  5184  5189  5197  5211  5216  5217  5228  5231  5234\n[1225]  5235  5239  5242  5246  5247  5248  5256  5260  5262  5264  5265  5272\n[1237]  5273  5286  5287  5290  5302  5303  5306  5309  5327  5329  5341  5343\n[1249]  5346  5350  5361  5366  5383  5385  5386  5387  5390  5399  5400  5401\n[1261]  5409  5411  5413  5414  5415  5422  5426  5432  5440  5442  5446  5451\n[1273]  5459  5463  5465  5470  5477  5492  5495  5496  5498  5500  5505  5509\n[1285]  5515  5521  5523  5524  5525  5528  5529  5530  5531  5549  5552  5569\n[1297]  5571  5577  5581  5583  5589  5592  5595  5599  5601  5603  5604  5611\n[1309]  5615  5622  5624  5626  5628  5635  5636  5640  5644  5646  5649  5654\n[1321]  5657  5659  5680  5681  5691  5693  5695  5704  5708  5712  5716  5729\n[1333]  5735  5737  5744  5751  5753  5758  5761  5763  5764  5777  5781  5783\n[1345]  5786  5788  5789  5791  5792  5798  5807  5818  5821  5824  5829  5833\n[1357]  5844  5849  5851  5858  5861  5880  5889  5895  5896  5906  5907  5916\n[1369]  5923  5928  5938  5948  5951  5955  5963  5964  5967  5968  5969  5973\n[1381]  5980  5984  5985  5990  5991  5993  5998  6000  6007  6008  6009  6016\n[1393]  6018  6027  6034  6037  6044  6045  6046  6054  6055  6058  6061  6063\n[1405]  6067  6073  6075  6077  6082  6091  6095  6101  6103  6105  6109  6111\n[1417]  6116  6118  6119  6135  6139  6141  6143  6146  6153  6157  6160  6169\n[1429]  6175  6176  6178  6182  6186  6187  6188  6190  6193  6196  6197  6198\n[1441]  6213  6218  6220  6221  6222  6223  6226  6230  6239  6241  6242  6246\n[1453]  6248  6252  6254  6256  6261  6262  6273  6277  6280  6281  6286  6289\n[1465]  6291  6299  6302  6307  6311  6314  6315  6327  6338  6340  6342  6347\n[1477]  6348  6349  6354  6358  6367  6377  6380  6383  6390  6392  6396  6398\n[1489]  6399  6401  6413  6419  6423  6426  6427  6433  6441  6442  6444  6445\n[1501]  6448  6450  6453  6455  6456  6462  6469  6474  6481  6483  6484  6486\n[1513]  6489  6490  6491  6497  6500  6503  6509  6512  6517  6520  6525  6526\n[1525]  6533  6534  6535  6536  6538  6541  6555  6560  6565  6567  6571  6572\n[1537]  6576  6579  6580  6582  6589  6590  6593  6596  6597  6602  6608  6610\n[1549]  6612  6615  6618  6621  6633  6638  6641  6646  6652  6654  6663  6668\n[1561]  6669  6672  6675  6680  6682  6683  6684  6687  6691  6695  6697  6699\n[1573]  6704  6714  6717  6718  6721  6723  6727  6734  6737  6743  6746  6747\n[1585]  6765  6769  6773  6781  6783  6788  6790  6792  6796  6800  6807  6814\n[1597]  6815  6823  6829  6836  6839  6848  6851  6852  6855  6857  6864  6865\n[1609]  6867  6872  6883  6885  6886  6888  6891  6893  6902  6912  6918  6929\n[1621]  6931  6936  6939  6944  6945  6947  6961  6966  6968  6971  6972  6978\n[1633]  6980  6995  6998  6999  7003  7006  7012  7014  7016  7019  7023  7029\n[1645]  7036  7046  7047  7049  7062  7064  7067  7070  7072  7077  7078  7079\n[1657]  7083  7089  7093  7094  7099  7102  7103  7104  7109  7121  7122  7125\n[1669]  7127  7132  7134  7141  7146  7149  7152  7156  7159  7163  7171  7174\n[1681]  7179  7188  7191  7195  7196  7201  7203  7209  7219  7221  7222  7224\n[1693]  7225  7232  7235  7239  7241  7242  7247  7248  7256  7257  7262  7270\n[1705]  7277  7282  7293  7301  7306  7309  7314  7316  7317  7319  7321  7327\n[1717]  7330  7335  7336  7348  7349  7352  7359  7363  7366  7370  7376  7377\n[1729]  7381  7383  7385  7386  7387  7394  7395  7396  7404  7405  7407  7409\n[1741]  7411  7422  7426  7432  7439  7440  7441  7444  7452  7456  7460  7463\n[1753]  7473  7476  7495  7496  7499  7502  7504  7507  7508  7516  7518  7521\n[1765]  7522  7525  7530  7531  7535  7545  7548  7551  7554  7555  7561  7578\n[1777]  7581  7583  7585  7588  7591  7596  7599  7608  7614  7616  7621  7625\n[1789]  7626  7633  7634  7640  7641  7642  7643  7645  7646  7649  7652  7654\n[1801]  7655  7659  7663  7666  7667  7669  7673  7681  7682  7684  7687  7690\n[1813]  7692  7694  7697  7706  7708  7710  7712  7713  7715  7719  7724  7727\n[1825]  7732  7733  7734  7737  7741  7744  7745  7746  7751  7756  7758  7763\n[1837]  7773  7774  7785  7788  7791  7793  7794  7797  7799  7806  7819  7822\n[1849]  7824  7828  7837  7840  7849  7861  7867  7872  7876  7879  7883  7891\n[1861]  7892  7894  7899  7905  7908  7910  7917  7929  7930  7932  7938  7940\n[1873]  7941  7945  7961  7963  7970  7972  7975  7978  7983  7986  7994  7995\n[1885]  8002  8008  8016  8022  8024  8025  8026  8029  8031  8032  8034  8035\n[1897]  8038  8039  8044  8065  8068  8070  8071  8074  8077  8081  8082  8086\n[1909]  8093  8096  8098  8099  8101  8109  8114  8116  8119  8127  8129  8135\n[1921]  8139  8145  8149  8154  8155  8157  8162  8163  8173  8174  8175  8179\n[1933]  8181  8186  8189  8194  8213  8218  8220  8227  8228  8233  8234  8235\n[1945]  8238  8246  8247  8248  8255  8263  8264  8266  8268  8269  8272  8281\n[1957]  8288  8297  8300  8315  8317  8329  8332  8334  8339  8342  8361  8362\n[1969]  8370  8372  8373  8375  8377  8379  8380  8383  8386  8388  8395  8399\n[1981]  8401  8403  8405  8407  8409  8411  8418  8425  8427  8431  8434  8435\n[1993]  8436  8437  8439  8446  8453  8459  8460  8462  8466  8474  8478  8481\n[2005]  8484  8488  8493  8496  8499  8513  8514  8518  8522  8525  8530  8534\n[2017]  8536  8538  8541  8549  8552  8553  8554  8558  8562  8573  8574  8587\n[2029]  8588  8592  8593  8594  8597  8607  8613  8622  8626  8630  8640  8653\n[2041]  8654  8663  8664  8680  8689  8690  8694  8701  8702  8703  8704  8707\n[2053]  8716  8723  8729  8731  8735  8740  8742  8744  8748  8755  8756  8758\n[2065]  8760  8763  8765  8766  8791  8793  8797  8803  8807  8809  8811  8812\n[2077]  8813  8818  8819  8823  8824  8829  8830  8837  8840  8845  8851  8852\n[2089]  8853  8856  8857  8859  8861  8869  8876  8880  8894  8904  8906  8928\n[2101]  8929  8931  8932  8939  8948  8953  8954  8956  8957  8961  8964  8971\n[2113]  8972  8988  8990  8994  9001  9007  9015  9023  9032  9043  9056  9057\n[2125]  9064  9075  9077  9080  9081  9091  9095  9096  9097  9098  9111  9112\n[2137]  9115  9127  9129  9135  9138  9139  9141  9144  9148  9150  9152  9154\n[2149]  9160  9170  9177  9178  9185  9187  9196  9197  9206  9213  9214  9225\n[2161]  9229  9231  9237  9238  9240  9241  9254  9256  9257  9260  9261  9265\n[2173]  9272  9277  9280  9283  9291  9293  9294  9298  9301  9302  9304  9306\n[2185]  9311  9312  9316  9323  9324  9326  9327  9336  9339  9340  9343  9346\n[2197]  9350  9351  9354  9360  9362  9363  9365  9367  9368  9370  9373  9375\n[2209]  9382  9383  9405  9408  9409  9411  9418  9426  9440  9443  9452  9457\n[2221]  9476  9482  9499  9500  9504  9507  9510  9512  9513  9514  9520  9530\n[2233]  9533  9534  9542  9548  9551  9556  9560  9566  9567  9577  9578  9579\n[2245]  9587  9588  9595  9599  9603  9605  9608  9610  9612  9617  9630  9631\n[2257]  9633  9635  9636  9643  9644  9645  9651  9653  9658  9659  9667  9673\n[2269]  9679  9684  9695  9701  9715  9719  9725  9726  9738  9739  9742  9749\n[2281]  9750  9751  9759  9761  9763  9770  9777  9786  9788  9791  9794  9796\n[2293]  9798  9800  9807  9814  9826  9827  9830  9847  9850  9851  9855  9862\n[2305]  9864  9867  9874  9883  9887  9899  9900  9901  9908  9910  9911  9915\n[2317]  9916  9918  9926  9929  9930  9941  9942  9943  9945  9950  9953  9954\n[2329]  9960  9962  9967  9969  9972  9975  9976  9977  9981  9998 10000\n```\n:::\n:::\n\n\nBecause we simulated the data, we know that 1954 tests are under the alternative, and the rest, 8046, should be under the null. But after our tests, we have found 2339 to be under the alternative and 7661 to be under the null. So, there are some 385 that have been misclassified as under the alternative when they are not, and some -385\n\n::: {.cell}\n\n```{.r .cell-code}\ntp <- sum(wtrue == 1 & pvec_mix < 0.05)\ntn <- sum(wtrue == 0 & pvec_mix >= 0.05)\nfp <- sum(wtrue == 1 & pvec_mix >= 0.05)\nfn <- sum(wtrue == 0 & pvec_mix < 0.05)\n```\n:::\n\n\nAlternatively, `table(pvec_mix > 0.05, wtrue)` will yield the same result.\n\n|                         | alternative | null        | total       |\n|-------------------------|-------------|-------------|-------------|\n| classified: alternative | 1954      | 385      | 2339 |\n| classified: null        | 0      | 7661      | 7661 |\n| total                   | 1954 | 8046 |             |\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}